function [ F ] = RK_Dormand_Prince( f, x, u, t_final )

    import casadi.*;
    
    nRK = 20;
    dt = t_final/nRK;
    
    X0 = x;
    U = u;
    
    X = X0;
    Z = 0;
    a = [0 0 0 0 0 0 0;
        1/5 0 0 0 0 0 0;
        3/40 9/40 0 0 0 0 0;
        44/45 -56/15 32/9 0 0 0 0;
        19372/6561 -25360/2187 64448/6561 -212/729 0 0 0;
        9017/3168 -355/33 46732/5247 49/176 -5103/18656 0 0;
        35/384 0 500/1113 125/192 -2187/6784 11/84 0];
    b = [35/384;0;500/1113;125/192;-2187/6784;11/84;0];
    
    for j=1:nRK
       [k1, k1_z] = f(X, U);
       [k2, k2_z] = f(X + k1 * a(2,1) * dt, U);
       [k3, k3_z] = f(X + [k1 k2] * a(3,1:2)' * dt, U);
       [k4, k4_z] = f(X + [k1 k2 k3] * a(4,1:3)' * dt, U);
       [k5, k5_z] = f(X + [k1 k2 k3 k4] * a(5,1:4)' * dt, U);
       [k6, k6_z] = f(X + [k1 k2 k3 k4 k5] * a(6,1:5)' * dt, U);
       [k7, k7_z] = f(X + [k1 k2 k3 k4 k5 k6] * a(7,1:6)' * dt, U);
       
       X = X + [k1   k2   k3   k4   k5   k6   k7  ]*b*dt;
       Z = Z + [k1_z k2_z k3_z k4_z k5_z k6_z k7_z]*b*dt;
    end
    
    F = Function('F', {x, u}, {X, Z}, {'x', 'u'}, {'X', 'Z'});

end

